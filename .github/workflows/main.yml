name: CI/CD Docker

# 트리거를 수행할 브랜치를 지정합니다.
on:
  pull_request:
    branches: [main]
    types: [closed]

# 환경설정
env:
  DOCKER_IMAGE: ghcr.io/${{ github.actor }}/broadway_9th
  VERSION: ${{ github.sha }}
  NAME: go_cicd

jobs:
  # 빌드 Job
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      # github repository에서 checkout
      - uses: actions/checkout@v2
      # docker build 수행
      - name: Set up docker buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
      - name: Cache docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ env.VERSION }}
          restore-keys: |
            ${{ runner.os }}-buildx-11
      # GitHub 컨테이너 레지스트리에 로그인 후 빌드 & 푸시
      - name: Login to ghcr
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags: ${{ env.DOCKER_IMAGE }}:latest
  # 배포 Job
  deploy:
    needs: build # build 후에 실행되도록 정의
    name: Deploy
    runs-on: [self-hosted, label-go] # AWS ./configure에서 사용할 label명
    steps:
      - name: Login to ghcr
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}
      # 3000 -> 80 포트로 수행하도록 지정 ..
      - name: Docker run
        run: |
          docker stop ${{ env.NAME }} || true
          docker rm ${{ env.NAME }} || true
          docker rmi ${{ env.DOCKER_IMAGE }}:latest || true
          docker network create app-network || true          
          docker run -d -p 80:3000 -p 443:3001 --name go_cicd --network app-network --restart always \
            -e DATABASE_HOST='node-final.cdlyzoinjxjt.ap-northeast-2.rds.amazonaws.com' \
            -e DATABASE_PORT=3306 \
            -e DATABASE_USERNAME=root \
            -e DATABASE_PASSWORD="${{ secrets.DATABASE_PASSWORD }}" \
            -e DATABASE_NAME=broadway \
            -e DATABASE_SYNCHRONIZE=false \            
            -e JWT_SECRET=secret \            
            -v /etc/letsencrypt/live/jyh7b.shop/privkey.pem:/app/certs/private.key \
            -v /etc/letsencrypt/live/jyh7b.shop/fullchain.pem:/app/certs/certificate.pem \
            ${{ env.DOCKER_IMAGE }}:latest
